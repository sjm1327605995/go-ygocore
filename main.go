package main

import (
	"fmt"
	"github.com/sjm1327605995/go-ygocore/config"
	"math/rand"
)

//func main() {
//
//	config.InitConf()
//	InitDB()
//	NewDeckManger()
//	DkManager.LoadLFList()
//	DataCache.LoadDB()
//	addr := fmt.Sprintf("tcp://127.0.0.1:8080")
//
//	//TCP 和UDP 都支持。对TCP分装的。可以通过TCP添加一层协议解析获取内容
//	var srv = NewServer()
//
//	log.Println("server exits:", gnet.Run(srv, addr, gnet.WithMulticore(true), gnet.WithReusePort(true), gnet.WithTicker(false)))
//}

func main() {
	config.InitConf()
	InitDB()
	NewDeckManger()
	DkManager.LoadLFList()
	DataCache.LoadDB()
	RegisterDo()
	n := rand.Int31n(10000)

	pduel := CreateDuel(n)
	fmt.Println("pduel", pduel)
	duel := &SingleDuel{
		players: [2]*DuelPlayer{&DuelPlayer{Pos: 0}, &DuelPlayer{Pos: 1}},
		DuelModeBase: DuelModeBase{
			pDuel: pduel,
		},
	}

	SetPlayerInfo(pduel, 0, 8000, 5, 1)
	SetPlayerInfo(pduel, 1, 8000, 5, 1)
	var (
		mainCards = []uint32{14124483, 9411399, 9411399, 18094166, 18094166, 18094166, 40044918, 40044918, 59392529, 50720316, 50720316, 27780618, 27780618, 16605586, 16605586, 22865492, 22865492, 23434538, 23434538, 14558127, 14558127,
			13650422, 83965310, 81439173, 8949584, 8949584, 32807846, 52947044, 45906428, 24094653, 21143940, 21143940, 21143940, 48130397, 24224830, 24224830, 12071500, 24299458, 24299458, 10045474}
		exidCards = []uint32{73580471, 79606837, 79606837, 79606837, 21521304, 27552504, 1174075, 1174075, 1174075, 73898890, 73898890, 72336818, 41999284, 94259633, 94259633}
	)

	for i := len(mainCards) - 1; i >= 0; i-- {

		NewCard(pduel, mainCards[i], 0, 0, LOCATION_DECK, 0, POS_FACEDOWN_DEFENSE)
	}
	for i := len(exidCards) - 1; i >= 0; i-- {

		NewCard(pduel, exidCards[i], 0, 0, LOCATION_EXTRA, 0, POS_FACEDOWN_DEFENSE)
	}

	for i := len(mainCards) - 1; i >= 0; i-- {

		NewCard(pduel, mainCards[i], 1, 1, LOCATION_DECK, 0, POS_FACEDOWN_DEFENSE)
	}
	for i := len(exidCards) - 1; i >= 0; i-- {
		NewCard(pduel, exidCards[i], 1, 1, LOCATION_EXTRA, 0, POS_FACEDOWN_DEFENSE)
	}
	count1 := QueryFieldCount(pduel, 0, 0x1)
	count2 := QueryFieldCount(pduel, 0, 0x40)
	count3 := QueryFieldCount(pduel, 1, 0x1)
	count4 := QueryFieldCount(pduel, 1, 0x40)
	fmt.Println(count1, count2, count3, count4)
	duel.RefreshExtraDef(0)
	duel.RefreshExtraDef(1)
	opt := 5 << 16
	StartDuel(pduel, int32(opt))

	duel.Process()
}

//b4040106004050000000ff1fe8008a137503004000088a13750321000004000000000000000020000000010000004006000000000000400600000000000000000000000000000000000000000000020000000500000050000000ff1fe8008a137503004001088a13750321000004000000000000000020000000010000004006000000000000400600000000000000000000000000000000000000000000020000000500000050000000ff1fe800cbbb1d0000400208cbbb1d0021000004000000000000000010000000010000006c070000000000006c0700000000000000000000000000000000000000000000020000008200000050000000ff1fe800c0b5cd0300400308c0b5cd032100000400000000000000002000000001000000c409000000000000c40900000000000000000000000000000000000000000000030000000700000050000000ff1fe800fb7fc90200400408fb7fc9026100000008000000000000002000000001000000c4090000d0070000c4090000d007000000000000000000000000000000000000000000000000000050000000ff1fe8000d505b05004005080d505b0561000000060000000000000008000000010000009808000008070000980800000807000000000000000000000000000000000000000000000000000050000000ff1fe800a45b7c0300400608a45b7c0361000000060000000000000020000000010000006009000008070000600900000807000000000000000000000000000000000000000000000000000050000000ff1fe800a45b7c0300400708a45b7c0361000000060000000000000020000000010000006009000008070000600900000807000000000000000000000000000000000000000000000000000050000000ff1fe800948f5d0100400808948f5d016100000007000000000000001000000001000000c4090000b0040000c4090000b004000000000000000000000000000000000000000000000000000050000000ff1fe800ec929a0300400908ec929a036100000008000000000000002000000001000000c409000034080000c40900003408000000000000000000000000000000000000000000000000000050000000ff1fe800ec929a0300400a08ec929a036100000008000000000000002000000001000000c409000034080000c40900003408000000000000000000000000000000000000000000000000000050000000ff1fe800b5626f0200400b08b5626f026100000008000000000000000200000001000000c4090000d0070000c4090000d007000000000000000000000000000000000000000000000000000050000000ff1fe80080f6bb0100400c0880f6bb016100000008000000000000000200000001000000280a000034080000280a00003408000000000000000000000000000000000000000000000000000050000000ff1fe800e3cf740200400d08e3cf74026100000008000000000000002000000000200000f00a0000d0070000f00a0000d007000000000000000000000000000000000000000000000000000050000000ff1fe80039c9220500400e0839c922056100000008000000000000002000000008000000b80b0000b80b0000b80b0000b80b0000000000000000000000000000000000000000000000000000
//b4040106004050000000ff1fe800b1499e0500400008b1499e0500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050000000ff1fe800b1499e0500400108b1499e0500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050000000ff1fe800b4db800200400208b4db800200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050000000ff1fe800b2c54f0400400308b2c54f0400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050000000ff1fe8008a9b6704004004088a9b670400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050000000ff1fe8008a9b6704004005088a9b670400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050000000ff1fe8003bea1100004006083bea110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050000000ff1fe8003bea1100004007083bea110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050000000ff1fe8003bea1100004008083bea110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050000000ff1fe800f86aa40100400908f86aa40100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050000000ff1fe8009863480100400a089863480100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050000000ff1fe80035b4be0400400b0835b4be0400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050000000ff1fe80035b4be0400400c0835b4be0400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050000000ff1fe80035b4be0400400d0835b4be0400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050000000ff1fe800b7bf620400400e08b7bf6204000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
